#!/usr/bin/env python

from DPAPI import *
import sys, os
from optparse import OptionParser


if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("--sid", metavar="SID", dest="sid")
    parser.add_option("--entropy", metavar="ENTROPY", dest="entropy")
    parser.add_option("--strong", metavar="PASSWORD", dest="strongpwd")
    parser.add_option("--masterkey", metavar="DIRECTORY", dest="masterkeydir")
    parser.add_option("--credhist", metavar="FILE", dest="credhist")
    parser.add_option("--wordlist", metavar="FILE", dest="wordlist")
    parser.add_option("--password", metavar="PASSWORD", dest="password")
    (options, args) = parser.parse_args()


    chp = credhist.CredHistPool(open(options.credhist).read())

    if options.wordlist is not None:
        chp.addWordlist(options.wordlist)

    chp.decryptWithPassword(options.password)

    mkp = masterkey.MasterKeyPool()
    for k in os.listdir(options.masterkeydir):
        if k == "Preferred":
            continue
	mkdata = open(os.path.join(options.masterkeydir, k)).read()
	mkp.addMasterKey(mkdata, options.sid)

    for b in args:
	blobdata = open(b).read()
	blob = blob.DPAPIBlob(blobdata)

	keyid = blob.guid[0]
	mk = mkp.getMasterKey(keyid, options.sid)
	mk.decryptWithPassword(options.sid, options.password,)
	if not mk.decrypted:
            credid = mk.credhist.guid
	    cred = chp.lookupGUID(credid)
	    mk.decryptWithHash(option.sid, cred)
	    if not mk.decrypted:
		print >>sys.stderr, "Error: cannot decrypt masterkey"
		sys.exit(1)
	blob.decrypt(mk.get_key(), option.entropy, option.strongpwd)

	print blob.clearText

	print "BLOB=%r" % (blob)


